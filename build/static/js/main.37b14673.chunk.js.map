{"version":3,"sources":["components/CreateBreakfast.js","components/InputClient.js","components/ShowMenu.js","components/CreateDinner.js","App.js","serviceWorker.js","index.js"],"names":["CreateBreakfast","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_printMenu","bool","setState","printMenu","state","breakfast","menu","map","food","i","react_default","a","createElement","className","name","price","onClick","bind","Component","InputClient","showName","showMenu","event","target","value","preventDefault","console","log","showClient","toUpperCase","components_CreateBreakfast","onSubmit","handleSubmit","type","onChange","handleInput","ShowMenu","components_InputClient","App","components_ShowMenu","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.37b14673.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { breakfast } from \"./breakfast.json\";\r\n\r\n\r\nclass CreateBreakfast extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        breakfast: breakfast,\r\n        printMenu:false,\r\n      };\r\n    }\r\n    _printMenu = (bool) => {\r\n      this.setState({\r\n        printMenu: bool\r\n      });\r\n    }\r\n  \r\n    render() {\r\n  \r\n    const menu = this.state.breakfast.map((food,i)=>{\r\n      return(\r\n        \r\n            <div className=\"card mt-4\">\r\n              <div className=\"card-header\">\r\n                <h5>{food.name}</h5>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <p>{food.price}</p>\r\n              </div>\r\n            </div>\r\n          \r\n      )\r\n    })\r\n      return (\r\n        <div className=\"menu\">\r\n          <div>\r\n            <button onClick={this._printMenu.bind(null, true)}>DESAYUNO</button>\r\n            <div className=\"container\">\r\n              <div className=\"row mt-4\">\r\n                { this.state.printMenu && <div>{menu}</div> }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  export default CreateBreakfast;  ","import React, { Component } from 'react';\r\nimport CreateBreakfast from './CreateBreakfast';\r\n\r\nclass InputClient extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      showName: false,\r\n      name : null,\r\n      showMenu: false,\r\n    };\r\n  }\r\n  handleInput(event){\r\n    this.setState({name: event.target.value});\r\n  }\r\n  handleSubmit(event){\r\n    event.preventDefault();\r\n    console.log(this.state.name);\r\n    this.setState({\r\n      showName: true,\r\n      showMenu: true,\r\n\r\n    });\r\n  }\r\n  \r\n\r\n  render(){\r\n    const showClient = (this.state.showName ? (' PEDIDO DE '+(this.state.name).toUpperCase()):' ');\r\n    const printMenu = (this.state.showMenu ? (<CreateBreakfast />):' ');\r\n    \r\n    return(\r\n      <div>\r\n        <form className=\"card-body\" onSubmit={this.handleSubmit.bind(this)}>\r\n          <input type=\"text\" onChange={this.handleInput.bind(this)} value={this.state.name} />\r\n          <input type=\"submit\" />\r\n        </form>\r\n        <h5>{showClient}</h5>\r\n        {printMenu}\r\n        \r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n  export default InputClient;  \r\n","import React, { Component } from 'react';\r\nimport InputClient from './InputClient';\r\n\r\nimport CreateDinner from './CreateDinner';\r\n\r\nclass ShowMenu extends Component {\r\n\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"ShowMenu\">\r\n          <InputClient />  \r\n          \r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default ShowMenu;","import React, { Component } from 'react';\r\nimport { dinner } from \"./dinner.json\";\r\n\r\nclass CreateDinner extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        dinner\r\n      };\r\n    }\r\n  \r\n    render() {\r\n  \r\n    const menu = this.state.dinner.map((food,i)=>{\r\n      return(\r\n        <div className=\"col-m d-4\">\r\n          <div className=\"card mt-4\">\r\n            <div className=\"card-header\">\r\n              <h3>{food.name}</h3>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <p>{food.price}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    })\r\n      return (\r\n        <div className=\"menu\">\r\n          <div className=\"container\">\r\n            <div className=\"row mt-4\">\r\n              {menu}\r\n            </div>\r\n          </div>\r\n          \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  export default CreateDinner;  ","import React, { Component } from 'react';\r\nimport './css/App.css';\r\n\r\nimport ShowMenu from './components/ShowMenu';\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ShowMenu />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}